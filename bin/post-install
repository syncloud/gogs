APP_NAME = 'gogs'
USER_NAME = 'git'
SYSTEMD_GOGS = 'gogs'
SYSTEMD_POSTGRESQL = 'gogs-postgresql'
PSQL_PATH = 'postgresql/bin/psql'
DB_USER = 'git'
DB_PASS = 'git'

import sys
from os.path import isdir, join
from subprocess import check_output
import shutil
from syncloud_app import logger


def database_init(app_install_dir, app_data_dir, user_name):
    log = logger.get_logger('postgres')
    database_path = join(app_data_dir, 'database')
    if not isdir(database_path):
        psql_initdb = join(app_install_dir, 'postgresql/bin/initdb')
        log.info(check_output(['sudo', '-H', '-u', user_name, psql_initdb, database_path]))
        postgresql_conf_to = join(database_path, 'postgresql.conf')
        postgresql_conf_from = join(app_install_dir, 'config', 'postgresql.conf')
        shutil.copy(postgresql_conf_from, postgresql_conf_to)
    else:
        log.info('Database path "{0}" already exists'.format(database_path))
    return database_path


class Database:

    def __init__(self, psql, database, user, database_path):
        self.psql = psql
        self.database = database
        self.user = user
        self.database_path = database_path

    def execute(self, sql):
        log = logger.get_logger('postgres')
        log.info("executing: {0}".format(sql))
        command_line = '{0} -U {1} -d {2} -c "{3}" -h {4}'.format(self.psql, self.user, self.database, sql, self.database_path)
        log.info(check_output(command_line, shell=True))


from syncloud_platform.application import api
from syncloud_platform.gaplib import fs, linux, gen

log = logger.get_logger('nextcloud_installer')

app = api.get_app_setup(APP_NAME)
app_dir = app.get_install_dir()
app_data_dir = app.get_data_dir()

home_folder = join('/home', USER_NAME)
linux.useradd(USER_NAME, home_folder=home_folder)

gogs_executable = join(app_dir, 'gogs', 'gogs')
check_output('chmod +x {0}'.format(gogs_executable), shell=True)

log_path = join(app_data_dir, 'log')

fs.makepath(log_path)

variables = {'app_dir': app_dir, 'app_data_dir': app_data_dir}

templates_path = join(app_dir, 'config.templates')
config_path = join(app_dir, 'config')

gen.generate_files(templates_path, config_path, variables)

database_path = database_init(app_dir, app_data_dir, DB_USER)

fs.chownpath(app_dir, USER_NAME, recursive=True)
fs.chownpath(app_data_dir, USER_NAME, recursive=True)

app.add_service(SYSTEMD_POSTGRESQL)

db_postgres = Database(join(app_dir, PSQL_PATH), database='postgres', user=DB_USER, database_path=database_path)
db_postgres.execute("ALTER USER {0} WITH PASSWORD '{1}';".format(DB_USER, DB_PASS))

app.add_service(SYSTEMD_GOGS)

app.register_web(3000)

